jar {
    manifest {
        attributes(
                'Main-Class': 'com.marklogic.spring.batch.Main'
        )
    }
}

ext {
    mlAppConfig {
        createTriggersDatabase = false
    }

    mlInstallAdmin {
        adminUsername = "admin"
        adminPassword = "admin"
    }
}

task deployMarkLogicJobRepository(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.marklogic.spring.batch.Main'
    args = ["--deploy_job_repo", "--jr_name", mlJobRepositoryName, "--jr_host", mlHost, "--jr_port", mlRestPort, "--jr_username", mlManageUsername, "--jr_password", mlManagePassword]
}

task undeployMarkLogicJobRepository(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.marklogic.spring.batch.Main'
    args = ["--undeploy_job_repo", "--jr_name", mlJobRepositoryName, "--jr_host", mlHost, "--jr_port", mlRestPort, "--jr_username", mlManageUsername, "--jr_password", mlManagePassword]
}

// Setup the Job Repo in our test application so it's available for use by tests.
mlPostDeploy.dependsOn deployMarkLogicJobRepository
mlUndeploy.dependsOn undeployMarkLogicJobRepository

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
    publications = [bintrayPublicationName]
    pkg {
        repo = bintrayRepo
        name = artifactId
        userOrg = bintrayUserOrg
        licenses = [bintrayLicense]
        vcsUrl = bintrayVcsUrl
        version {
            name = project.version
            released = new Date()
            vcsTag = project.version
        }
    }
}