buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "com.marklogic:ml-gradle:3.0.0"
    }
}

plugins {
    id "com.marklogic.ml-gradle" version "3.0.0"
}

mlPostDeploy.dependsOn ":mlJobRepo:deployMarkLogicJobRepository"
mlUndeploy.dependsOn "mlJobRepo:undeployMarkLogicJobRepository"

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://developer.marklogic.com/maven2/" }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.3'
    }
}


subprojects {

    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "idea"
    apply plugin: "checkstyle"

    /*
     *  multi project builds must apply the bintray plugin
     *  and the plugin configuration to every project which
     *  its artifacts you wish to publish to bintray.
     */

    if (it.name in ["core", "infrastructure", "test", "http"]) {
        apply plugin: "com.jfrog.bintray"
    }

    ext {
        springBatchVersion = '3.0.8.RELEASE'
        springVersion = '4.3.9.RELEASE'
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile "org.slf4j:log4j-over-slf4j:1.7.25"
        compile "org.apache.logging.log4j:log4j-api:2.9.1"

        testCompile "junit:junit:4.12"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    checkstyle {
        configFile = file("${project.rootDir}/dev-tools/checkstyle/checkstyle.xml")
        toolVersion = '7.1.2'
    }

    if (it.name in ["core", "infrastructure", "test", "http"])  {
        task sourcesJar(type: Jar, dependsOn: classes) {
            baseName = artifactId
            version = project.version
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        jar {
            baseName = artifactId
            version = project.version
        }

        /*
         * Assumes each project has a single publication.
         */
        publishing {
            publications {
                mainJavaWithSources(MavenPublication) {
                    groupId group
                    artifactId project.property("artifactId")
                    version project.version
                    from components.java
                    artifact sourcesJar
                }
            }
        }
    }
}

project(':test') {
    dependencies {
        compile project(':infrastructure')
        compile project(':core')
        compile "org.springframework.batch:spring-batch-test:$springBatchVersion"
        compile "com.marklogic:ml-junit:3.0.0"
        // For detecting version of MarkLogic
        compile "com.marklogic:ml-app-deployer:3.0.0"
    }
}

project(':samples') {
    apply plugin: "application"

    dependencies {
        compile project(':core')
        compile project(':infrastructure')
        testCompile project(':test')

        // For importing images and extracting text from binaries
        compile "org.apache.tika:tika-parsers:1.13"
    }

    distributions {
        main {
            baseName = "samples"
        }
    }

    jar {
        baseName = "samples"
    }

    mainClassName = "com.marklogic.spring.batch.core.launch.support.CommandLineJobRunner"

    applicationName = "samples"

    task runYourJob(type: JavaExec) {
        main = 'com.marklogic.spring.batch.core.launch.support.CommandLineJobRunner'
        classpath = sourceSets.test.runtimeClasspath
        args = ["--job_path", "com.marklogic.spring.batch.samples.JobsConfig",
                "--job_id", "job",
                "--output_collections", "runYourJob",
                "--next"]
    }
}

project(':mlJobRepo') {
    apply plugin: "application"

    task deployMarkLogicJobRepository(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'com.marklogic.spring.batch.DeployMarkLogicJobRepository'
        args = ["--name", mlJobRepositoryName, "--host", mlHost, "--port", mlJobRepositoryPort, "--username", mlManageUsername, "--password", mlManagePassword]
    }

    task undeployMarkLogicJobRepository(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'com.marklogic.spring.batch.DeployMarkLogicJobRepository'
        args = ["--undeploy", "--name", mlJobRepositoryName, "--host", mlHost, "--port", mlRestPort, "--username", mlManageUsername, "--password", mlManagePassword]
    }

    dependencies {
        // For deploying the ML Job Repo
        compile "com.marklogic:ml-app-deployer:3.0.0"

        // For the CLI
        compile "net.sf.jopt-simple:jopt-simple:5.0.1"
    }

    mainClassName = "com.marklogic.spring.batch.DeployMarkLogicJobRepository"

}

project (':shapefiles') {

    dependencies {
        compile "org.apache.httpcomponents:httpmime:4.5.2"
        compile project(':infrastructure')
        testCompile project(':test')
    }

}
