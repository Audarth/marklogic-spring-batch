buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "com.marklogic:ml-gradle:2.4.0"
    }
}

plugins {
    id "com.marklogic.ml-gradle" version "2.4.0"
    id "java"
    id "eclipse"
    id "idea"
    id "checkstyle"
    id "maven-publish"
}

allprojects {
    apply plugin: "com.marklogic.ml-gradle"

    repositories {
        jcenter()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://developer.marklogic.com/maven2/" }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '3.2.1'
    }

    sourceSets.test.resources.srcDir 'src/test/java'
}


subprojects {

    /*
     * Not applying the bintray plugin. Couldn't get it working properly when declared
     * in subprojects, and when declared at root level of this script, it caused an httpcomponents
     * classpath issue with ml-gradle in the core project. So for now, each project has to
     * duplicate bintray publishing configuration.
     */

    apply plugin: "java"
    apply plugin: "com.jfrog.bintray"
    apply plugin: "maven-publish"


    ext {
        springVersionDefault = '3.0.7.RELEASE'
        springVersion = project.hasProperty('springVersion') ? getProperty('springVersion') : springVersionDefault
    }

    dependencies {
        compile "org.springframework.batch:spring-batch-core:$springVersion"
        compile "com.marklogic:java-client-api:4.0.0-EA3"
        compile "com.marklogic:ml-javaclient-util:2.11.0-dev"
        testCompile "org.springframework.batch:spring-batch-test:$springVersion"
        testCompile "com.marklogic:ml-junit:2.6.0"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    checkstyle {
        configFile = file("${project.rootDir}/dev-tools/checkstyle/checkstyle.xml")
        toolVersion = '7.1.2'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        baseName = artifactId
        version = project.version
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    jar {
        baseName = artifactId
        version = project.version
    }

    /*
     * Assumes each project has a single publication.
     */
    publishing {
        publications {
            mainJavaWithSources(MavenPublication) {
                groupId group
                artifactId project.property("artifactId")
                version project.version
                from components.java
                artifact sourcesJar
            }
        }
    }
}

project(':core') {

    dependencies {

        // Used by ML Job Repo implementation; depends on DataFieldMaxValueIncrementer
        compile "org.springframework:spring-jdbc:4.2.6.RELEASE"

        // Used by MarkLogicBatchConfiguration, which depends on Jaxb2Marshaller
        compile "org.springframework:spring-oxm:4.2.6.RELEASE"

        // For deploying the ML Job Repo
        compile "com.marklogic:ml-app-deployer:2.3.0"

        // For the CLI
        compile "net.sf.jopt-simple:jopt-simple:5.0.1"

        runtime "org.springframework.batch:spring-batch-core:$springVersion"

        //com.marklogic.spring.batch.Main extends com.marklogic.client.helper.LoggingObject
        runtime "com.marklogic:ml-javaclient-util:2.10.0-alpha"

        runtime "org.springframework:spring-jdbc:4.2.6.RELEASE"

        runtime "net.sf.jopt-simple:jopt-simple:5.0.1"
    }

    task testExamples(type: GradleBuild) {
        buildFile = '../examples/build.gradle'
        tasks = [ 'test' ]
    }

    test.dependsOn testExamples
}

project(":infrastructure") {
    description = 'MarkLogic Spring Batch Infrastructure'

}

project(':test') {
    dependencies {
        compile project(':core')
        compile "org.springframework.batch:spring-batch-test:$springVersion"
}
}


